diff --git a/field_collection.module b/field_collection.module
index bf6a005..338b924 100644
--- a/field_collection.module
+++ b/field_collection.module
@@ -985,6 +985,38 @@ function field_collection_field_delete($entity_type, $entity, $field, $instance,
 }
 
 /**
+ * Implements hook_field_attach_insert().
+ *
+ * Resave field collections after host entities are created.
+ * This allows features including use of host entity tokens.
+ */
+function field_collection_field_attach_insert($host_entity_type, $host_entity) {
+  $options = array(
+    'default' => FALSE,
+    'deleted' => FALSE,
+    'language' => NULL,
+  );
+  list(, , $bundle) = entity_extract_ids($host_entity_type, $host_entity);
+  $instances = _field_invoke_get_instances($host_entity_type, $bundle, $options);
+  foreach ($instances as $instance) {
+    $field = field_info_field_by_id($instance['field_id']);
+    if ($field['type'] == 'field_collection') {
+      $field_name = $field['field_name'];
+      $available_languages = field_available_languages($host_entity_type, $field);
+      $languages = _field_language_suggestion($available_languages, $options['language'], $field_name);
+      foreach ($languages as $langcode) {
+        $items = isset($host_entity->{$field_name}[$langcode]) ? $host_entity->{$field_name}[$langcode] : array();
+        foreach ($items as &$item) {
+          if ($entity = field_collection_field_get_entity($item)) {
+            $entity->save(TRUE);
+          }
+        }
+      }
+    }
+  }
+}
+
+/**
  * Implements hook_field_delete_revision().
  */
 function field_collection_field_delete_revision($entity_type, $entity, $field, $instance, $langcode, &$items) {
diff --git a/field_collection.tokens.inc b/field_collection.tokens.inc
new file mode 100644
index 0000000..4fd0dff
--- /dev/null
+++ b/field_collection.tokens.inc
@@ -0,0 +1,46 @@
+<?php
+
+/**
+ * @file
+ * Builds placeholder replacement tokens for field-collection-related data.
+ */
+
+/**
+ * Implements hook_token_info().
+ */
+function field_collection_token_info() {
+  $info = array();
+
+  $info['tokens']['field_collection_item']['host'] = array(
+    'name' => t('Field Collection host entity'),
+    'description' => t('Host entity.'),
+    'type' => 'node',
+  );
+
+  return $info;
+}
+
+/**
+ * Implements hook_tokens().
+ */
+function field_collection_tokens($type, $tokens, array $data = array(), array $options = array()) {
+  $replacements = array();
+  $sanitize = !empty($options['sanitize']);
+
+  if ($type == 'field_collection_item' && !empty($data[$type])) {
+    $item = $data[$type];
+
+    if ($host_entity_tokens = token_find_with_prefix($tokens, 'host')) {
+      // Load field collection item and getting host entity and host entity type.
+      $host_entity_type = $item->hostEntityType();
+      $host_entity = $item->hostEntity();
+
+      $host_entity_info = entity_get_info($host_entity_type);
+      $host_entity_token_type = isset($host_entity_info['token type']) ? $host_entity_info['token type'] : $host_entity_type;
+      $replacements += token_generate($host_entity_token_type, $host_entity_tokens, array($host_entity_token_type => $host_entity));
+    }
+  }
+
+  return $replacements;
+}
+
